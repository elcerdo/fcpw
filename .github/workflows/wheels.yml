name: Wheels

on: 
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build_mac_windows:
    name: Build wheels (macOS, Windows)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-13, macos-14]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Update submodules
      run: git submodule update --init --recursive

    - name: Clone nanobind
      run: git clone --recurse-submodules https://github.com/wjakob/nanobind.git deps/nanobind

    - name: Download slang binaries (Windows)
      if: matrix.os == 'windows-latest'
      id: download-win64
      uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: shader-slang/slang
        file: 'slang-.*-windows-x86_64\.zip'
        target: "./"
        regex: true

    - name: Unzip slang binaries (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $zipFile = Get-ChildItem -Filter "slang-*-windows-x86_64.zip"
        Expand-Archive -Path $zipFile.FullName -DestinationPath deps/slang
      shell: pwsh

    - name: Build wheels with cibuildwheel
      uses: pypa/cibuildwheel@v2.20
      env:
        CIBW_CONFIG_SETTINGS_MACOS: cmake.define.FCPW_USE_ENOKI=OFF
        CIBW_CONFIG_SETTINGS_WINDOWS: cmake.define.FCPW_ENABLE_GPU_SUPPORT=ON

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: wheelhouse/*.whl

  build_linux:
    name: Build wheels (Ubuntu)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Update submodules
      run: git submodule update --init --recursive

    - name: Clone nanobind
      run: git clone --recurse-submodules https://github.com/wjakob/nanobind.git deps/nanobind

    - name: Download slang binaries
      if: matrix.os == 'ubuntu-latest'
      id: download-linux64
      uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: shader-slang/slang
        file: 'slang-.*-linux-x86_64\.zip'
        target: "./"
        regex: true

    - name: Unzip slang binaries
      if: matrix.os == 'ubuntu-latest'
      run: |
        zip_file=$(ls slang-*-linux-x86_64.zip)
        unzip "$zip_file" -d deps/slang

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build wheels
      run: |
        pip wheel --verbose . --config-settings=cmake.define.FCPW_ENABLE_GPU_SUPPORT=ON
        mkdir -p wheelhouse
        mv *.whl wheelhouse/

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}-py-${{ matrix.python-version }}
        path: wheelhouse/*.whl

  release:
    name: Create GitHub release and publish wheels
    needs: build_mac_windows, build_linux
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        path: ./dist

    - name: Flatten directory structure
      run: find ./dist -type f -name '*.whl' -exec mv {} ./dist/ \;

    - name: Delete all non-wheel files and directories
      run: |
        find ./dist -type f ! -name '*.whl' -delete
        find ./dist -type d -empty -delete

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: ./dist

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        body: |
          FCPW release containing pre-built python wheels for Windows, macOS, and Ubuntu.

          **NOTE:** Windows and Ubuntu come with GPU and CPU vectorization support, while the macOS wheels do not.
        files: ./dist/*.whl